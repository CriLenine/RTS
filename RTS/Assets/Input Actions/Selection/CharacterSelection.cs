//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/UnitSelection/CharacterSelection.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CharacterSelection : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CharacterSelection()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CharacterSelection"",
    ""maps"": [
        {
            ""name"": ""Selection"",
            ""id"": ""b19c5584-85f2-4cba-b85c-e4e24a4a8b90"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""bfcd5b73-bd5e-4f3f-9bac-cff64ccadca6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""7ebd39ea-837a-4d73-a97e-0c7c6d7120b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a9b47c8e-2b36-4dd5-ab32-666807c4ed17"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1601a41-c8dd-48ea-9219-fe4196e0f443"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Selection
        m_Selection = asset.FindActionMap("Selection", throwIfNotFound: true);
        m_Selection_Click = m_Selection.FindAction("Click", throwIfNotFound: true);
        m_Selection_Shift = m_Selection.FindAction("Shift", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Selection
    private readonly InputActionMap m_Selection;
    private ISelectionActions m_SelectionActionsCallbackInterface;
    private readonly InputAction m_Selection_Click;
    private readonly InputAction m_Selection_Shift;
    public struct SelectionActions
    {
        private @CharacterSelection m_Wrapper;
        public SelectionActions(@CharacterSelection wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_Selection_Click;
        public InputAction @Shift => m_Wrapper.m_Selection_Shift;
        public InputActionMap Get() { return m_Wrapper.m_Selection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectionActions set) { return set.Get(); }
        public void SetCallbacks(ISelectionActions instance)
        {
            if (m_Wrapper.m_SelectionActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_SelectionActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_SelectionActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_SelectionActionsCallbackInterface.OnClick;
                @Shift.started -= m_Wrapper.m_SelectionActionsCallbackInterface.OnShift;
                @Shift.performed -= m_Wrapper.m_SelectionActionsCallbackInterface.OnShift;
                @Shift.canceled -= m_Wrapper.m_SelectionActionsCallbackInterface.OnShift;
            }
            m_Wrapper.m_SelectionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Shift.started += instance.OnShift;
                @Shift.performed += instance.OnShift;
                @Shift.canceled += instance.OnShift;
            }
        }
    }
    public SelectionActions @Selection => new SelectionActions(this);
    public interface ISelectionActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
    }
}
