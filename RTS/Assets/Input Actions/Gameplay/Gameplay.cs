//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input Actions/Gameplay/Gameplay.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Gameplay : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Gameplay()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Gameplay"",
    ""maps"": [
        {
            ""name"": ""Mouse Controls"",
            ""id"": ""0c89f988-706a-442d-96ee-14aef1a68c31"",
            ""actions"": [
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""c9daa923-d26d-4196-a43d-76dcce21fc54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""b76e73fe-8996-4afe-9bda-60136c54024b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3b824252-c73a-4945-b6ef-0cdaa24c60b4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""379c378c-242d-4c73-afb6-a2ca7779b0b2"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard Controls"",
            ""id"": ""5ddd37fe-42cb-4714-b66e-0055977bcd2b"",
            ""actions"": [
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""dde66c44-56c3-47a6-9b0d-0ea4bbc1c3dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5d2beea5-d354-4379-ad6f-823bc99c92bb"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mouse Controls
        m_MouseControls = asset.FindActionMap("Mouse Controls", throwIfNotFound: true);
        m_MouseControls_LeftClick = m_MouseControls.FindAction("LeftClick", throwIfNotFound: true);
        m_MouseControls_RightClick = m_MouseControls.FindAction("RightClick", throwIfNotFound: true);
        // Keyboard Controls
        m_KeyboardControls = asset.FindActionMap("Keyboard Controls", throwIfNotFound: true);
        m_KeyboardControls_Shift = m_KeyboardControls.FindAction("Shift", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mouse Controls
    private readonly InputActionMap m_MouseControls;
    private IMouseControlsActions m_MouseControlsActionsCallbackInterface;
    private readonly InputAction m_MouseControls_LeftClick;
    private readonly InputAction m_MouseControls_RightClick;
    public struct MouseControlsActions
    {
        private @Gameplay m_Wrapper;
        public MouseControlsActions(@Gameplay wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftClick => m_Wrapper.m_MouseControls_LeftClick;
        public InputAction @RightClick => m_Wrapper.m_MouseControls_RightClick;
        public InputActionMap Get() { return m_Wrapper.m_MouseControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseControlsActions set) { return set.Get(); }
        public void SetCallbacks(IMouseControlsActions instance)
        {
            if (m_Wrapper.m_MouseControlsActionsCallbackInterface != null)
            {
                @LeftClick.started -= m_Wrapper.m_MouseControlsActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_MouseControlsActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_MouseControlsActionsCallbackInterface.OnLeftClick;
                @RightClick.started -= m_Wrapper.m_MouseControlsActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_MouseControlsActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_MouseControlsActionsCallbackInterface.OnRightClick;
            }
            m_Wrapper.m_MouseControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
            }
        }
    }
    public MouseControlsActions @MouseControls => new MouseControlsActions(this);

    // Keyboard Controls
    private readonly InputActionMap m_KeyboardControls;
    private IKeyboardControlsActions m_KeyboardControlsActionsCallbackInterface;
    private readonly InputAction m_KeyboardControls_Shift;
    public struct KeyboardControlsActions
    {
        private @Gameplay m_Wrapper;
        public KeyboardControlsActions(@Gameplay wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shift => m_Wrapper.m_KeyboardControls_Shift;
        public InputActionMap Get() { return m_Wrapper.m_KeyboardControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardControlsActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardControlsActions instance)
        {
            if (m_Wrapper.m_KeyboardControlsActionsCallbackInterface != null)
            {
                @Shift.started -= m_Wrapper.m_KeyboardControlsActionsCallbackInterface.OnShift;
                @Shift.performed -= m_Wrapper.m_KeyboardControlsActionsCallbackInterface.OnShift;
                @Shift.canceled -= m_Wrapper.m_KeyboardControlsActionsCallbackInterface.OnShift;
            }
            m_Wrapper.m_KeyboardControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shift.started += instance.OnShift;
                @Shift.performed += instance.OnShift;
                @Shift.canceled += instance.OnShift;
            }
        }
    }
    public KeyboardControlsActions @KeyboardControls => new KeyboardControlsActions(this);
    public interface IMouseControlsActions
    {
        void OnLeftClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
    }
    public interface IKeyboardControlsActions
    {
        void OnShift(InputAction.CallbackContext context);
    }
}
